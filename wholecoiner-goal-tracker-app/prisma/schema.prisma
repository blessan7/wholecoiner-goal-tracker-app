generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  privyId         String           @unique @map("privy_id")
  email           String           @unique
  walletAddress   String?          @map("wallet_address")
  twoFaEnabled    Boolean          @default(false) @map("2fa_enabled")
  twoFaHash       String?          @map("2fa_hash")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  goals           Goal[]
  notifications   Notification[]
  
  @@map("users")
}

model Goal {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  coin            CoinType
  targetAmount    Float            @map("target_amount")
  investedAmount  Float            @default(0) @map("invested_amount")
  frequency       Frequency
  amountInr       Float            @map("amount_inr")
  status          GoalStatus       @default(ACTIVE)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  pauseRequests   PauseRequest[]
  
  @@index([userId])
  @@index([status])
  @@map("goals")
}

model Transaction {
  id              String           @id @default(cuid())
  goalId          String           @map("goal_id")
  batchId         String           @map("batch_id")
  type            TransactionType
  provider        Provider
  network         Network
  txnHash         String?          @map("txn_hash")
  amountInr       Float?           @map("amount_inr")
  amountCrypto    Float?           @map("amount_crypto")
  tokenMint       String?          @map("token_mint")
  timestamp       DateTime         @default(now())
  meta            Json?
  
  goal            Goal             @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@index([goalId])
  @@index([batchId])
  @@index([type])
  @@map("transactions")
}

model Notification {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  type            String
  message         String
  status          NotificationStatus @default(UNREAD)
  timestamp       DateTime         @default(now())
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@map("notifications")
}

model PauseRequest {
  id              String           @id @default(cuid())
  goalId          String           @map("goal_id")
  requestedAt     DateTime         @default(now()) @map("requested_at")
  approvedAt      DateTime?        @map("approved_at")
  status          PauseRequestStatus @default(PENDING)
  
  goal            Goal             @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@index([goalId])
  @@map("pause_requests")
}

// Enums
enum CoinType {
  BTC
  ETH
  SOL
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum GoalStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum TransactionType {
  ONRAMP
  SWAP
}

enum Provider {
  ONMETA
  JUPITER
}

enum Network {
  DEVNET
  MAINNET
}

enum NotificationStatus {
  UNREAD
  READ
}

enum PauseRequestStatus {
  PENDING
  APPROVED
  REJECTED
}